package dao;

import bd.ConexionBD;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class CitaMedicaDAO {

    public static final DateTimeFormatter FMT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

    // ---- Modelo
    public static class CitaMedica {
        public Integer id;
        public int residenteId;
        public LocalDateTime fechaHora;
        public String especialidad;
        public String lugar;
        public String estado; // PROGRAMADA | REALIZADA | CANCELADA
        public String notas;

        public CitaMedica(Integer id, int residenteId, LocalDateTime fechaHora,
                          String especialidad, String lugar, String estado, String notas) {
            this.id = id; this.residenteId = residenteId; this.fechaHora = fechaHora;
            this.especialidad = especialidad; this.lugar = lugar; this.estado = estado; this.notas = notas;
        }
    }

    // ---- CRUD
    public List<CitaMedica> listarPorResidente(int residenteId) {
        String sql = """
                SELECT id,residente_id,fecha_hora,especialidad,lugar,estado,notas
                FROM citas_medicas WHERE residente_id=? ORDER BY datetime(fecha_hora)
                """;
        List<CitaMedica> out = new ArrayList<>();
        try (Connection c = ConexionBD.getConexion();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, residenteId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    out.add(new CitaMedica(
                            rs.getInt("id"),
                            rs.getInt("residente_id"),
                            LocalDateTime.parse(rs.getString("fecha_hora"), FMT),
                            rs.getString("especialidad"),
                            rs.getString("lugar"),
                            rs.getString("estado"),
                            rs.getString("notas")
                    ));
                }
            }
        } catch (SQLException e) { throw new RuntimeException("Error listando citas", e); }
        return out;
    }

    public int insertar(CitaMedica cta) {
        String sql = """
                INSERT INTO citas_medicas(residente_id,fecha_hora,especialidad,lugar,estado,notas)
                VALUES(?,?,?,?,?,?)
                """;
        try (Connection c = ConexionBD.getConexion();
             PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setInt(1, cta.residenteId);
            ps.setString(2, FMT.format(cta.fechaHora));
            ps.setString(3, cta.especialidad);
            ps.setString(4, cta.lugar);
            ps.setString(5, cta.estado);
            ps.setString(6, cta.notas);
            ps.executeUpdate();
            try (ResultSet keys = ps.getGeneratedKeys()) {
                return keys.next() ? keys.getInt(1) : -1;
            }
        } catch (SQLException e) { throw new RuntimeException("Error insertando cita", e); }
    }

    public void actualizar(CitaMedica cta) {
        String sql = """
                UPDATE citas_medicas
                SET residente_id=?, fecha_hora=?, especialidad=?, lugar=?, estado=?, notas=?
                WHERE id=?
                """;
        try (Connection c = ConexionBD.getConexion();
             PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, cta.residenteId);
            ps.setString(2, FMT.format(cta.fechaHora));
            ps.setString(3, cta.especialidad);
            ps.setString(4, cta.lugar);
            ps.setString(5, cta.estado);
            ps.setString(6, cta.notas);
            ps.setInt(7, cta.id);
            ps.executeUpdate();
        } catch (SQLException e) { throw new RuntimeException("Error actualizando cita", e); }
    }

    public void eliminar(int id) {
        try (Connection c = ConexionBD.getConexion();
             PreparedStatement ps = c.prepareStatement("DELETE FROM citas_medicas WHERE id=?")) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException e) { throw new RuntimeException("Error eliminando cita", e); }
    }

    public List<String> estados() {
        return List.of("PROGRAMADA", "REALIZADA", "CANCELADA");
    }
}
